#!/bin/bash -x

# Print the version information
${{COVERITY_PATH}}/coverity --version

# Add language extensions
file_list="${{TOOL_ANALYSIS_DIR}}/analysis_file_list.txt"
touch "$file_list"
if [[ "${{SOURCE_LANG}}" =~ "cpp" ]]; then
    find ${{SOURCE_DIR}} -iname "*.c" -o -iname "*.h"  -o -iname "*.cc"  -o -iname "*.cpp"  -o -iname "*.cxx"  -o -iname "*.c++"  -o -iname "*.hh"  -o -iname "*.hpp"  -o -iname "*.hxx"  -o -iname "*.h++"  -o -iname "*.ipp"  -o -iname "*.m" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "csharp" ]]; then
    find ${{SOURCE_DIR}} -iname "*.cs" >> "$file_list"
fi
# Performed by build only
if [[ "${{SOURCE_LANG}}" =~ "go" ]]; then
    find ${{SOURCE_DIR}} -iname "*.go" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "java" ]]; then
    find ${{SOURCE_DIR}} -iname "*.java" -o -iname "*.jav" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "javascript" ]]; then
    find ${{SOURCE_DIR}} -iname "*.js" -o -iname "*.jsx" -o -iname "*.cjs" -o -iname "*.mjs" -o -iname "*.vue" -o -iname "*.ts" -o -iname "*.tsx" -o -iname "*.cts" -o -iname "*.mts" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "kotlin" ]]; then
    find ${{SOURCE_DIR}} -iname "*.kt" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "php" ]]; then
    find ${{SOURCE_DIR}} -iname "*.php" -o -iname "*.php3" -o -iname "*.php4" -o -iname "*.php5" -o -iname "*.phtml" -o -iname "*.inc" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "python" ]]; then
    find ${{SOURCE_DIR}} -iname "*.py" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "ruby" ]]; then
    find ${{SOURCE_DIR}} -iname "*.rb" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "swift" ]]; then
    find ${{SOURCE_DIR}} -iname "*.swift" >> "$file_list"
fi
if [[ "${{SOURCE_LANG}}" =~ "vbnet" ]]; then
    find ${{SOURCE_DIR}} -iname "*.vb" >> "$file_list"
fi

# Change to the build directory
cd ${{COVERITY_BUILD_DIR}}

# Clean the build
${{COVERITY_CLEAN_CMD}}

# Capture the codebase
if [ -n "${{COVERITY_BUILD_CMD}}" ]; then
    # Capture the compiled languages
    ${{COVERITY_PATH}}/cov-build --dir ${{TOOL_ANALYSIS_DIR}} ${{COVERITY_COVBUILD_FLAGS}} ${{COVERITY_BUILD_CMD}}
fi

# Capture interpreted languages
${{COVERITY_PATH}}/cov-build --dir ${{TOOL_ANALYSIS_DIR}} ${{COVERITY_COVBUILD_FLAGS}} --no-command --fs-capture-list $file_list

# Perform analysis
${{COVERITY_PATH}}/cov-analyze --dir ${{TOOL_ANALYSIS_DIR}} ${{COVERITY_COVANALYZE_FLAGS}}

# Generate the Coverity output file
${{COVERITY_PATH}}/cov-format-errors --dir ${{TOOL_ANALYSIS_DIR}} ${{COVERITY_COVFORMATERRORS_FLAGS}} -x -X --json-output-v8 ${{TOOL_ANALYSIS_DIR}}/coverity.json

# Check to see if SARIF generation should be performed
if [ ${{COVERITY_JSON}} != "true" ]; then
    # Get the GitHub data if it exists
    if [ -f "${{SOURCE_DIR}}/.git/config" ]; then
        repo_name=`grep "url =" "${{SOURCE_DIR}}/.git/config" | sed -E 's:.+com/::' | sed -E 's:.git::'`
    else
        repo_name="$(basename ${{SOURCE_DIR}})/$(basename ${{SOURCE_DIR}})"
    fi
    if [ -f "${{SOURCE_DIR}}/.git/logs/HEAD" ]; then
        commit_array=($(tail -n 1 "${{SOURCE_DIR}}/.git/logs/HEAD"))
        commit_id=${commit_array[1]}
    else
        commit_id='0000000000000000000000000000000000000000'
    fi

    # Generate the SARIF file
    ${{COVERITY_PATH}}/../node/bin/node ${{COVERITY_PATH}}/../SARIF/cov-format-sarif-for-github.js --inputFile "${{TOOL_ANALYSIS_DIR}}/coverity.json" --outputFile "${{TOOL_ANALYSIS_DIR}}/coverity.sarif" --repoName $repo_name --checkoutPath $repo_name ${{SOURCE_DIR}} $commit_id
fi
