#!/bin/bash -x

# Change to the build directory
cd ${{CODEQL_BUILD_DIR}}

# Clean the build
${{CODEQL_CLEAN_CMD}}

# Create the CodeQL database
codeql_database_root=${{TOOL_ANALYSIS_DIR}}/codeql-database
if [ -n "${{CODEQL_BUILD_CMD}}" ]; then
    ${{CODEQL_PATH}}/codeql database create --db-cluster --language "${{SOURCE_LANG}}" --source-root ${{SOURCE_DIR}} --working-dir ${{CODEQL_BUILD_DIR}} ${{CODEQL_DATABASECREATE_FLAGS}} --command "${{CODEQL_BUILD_CMD}}" $codeql_database_root
else
    ${{CODEQL_PATH}}/codeql database create --db-cluster --language "${{SOURCE_LANG}}" --source-root ${{SOURCE_DIR}} --working-dir ${{CODEQL_BUILD_DIR}} ${{CODEQL_DATABASECREATE_FLAGS}} $codeql_database_root
fi

for database_yml in $(find $codeql_database_root -name 'codeql-database.yml')
do
    # Get the language
    database=$(dirname $database_yml)
    language=$(basename $database)

    # Upgrade the database to make sure that it works with the queries
    ${{CODEQL_PATH}}/codeql database upgrade --search-path ${{CODEQL_QUERY_PATH}} $database

    # Set the suppression query path
    if [ $language == "python" ]; then
        suppression_query="${{CODEQL_QUERY_PATH}}/python/ql/src/analysis/AlertSuppression.ql"
    else
        suppression_query="${{CODEQL_QUERY_PATH}}/$language/ql/src/AlertSuppression.ql"
    fi

    # Perform baseline analysis, if desired
    if ${{CODEQL_BASELINE_ANALYSIS}}; then
        ${{CODEQL_PATH}}/codeql database analyze --format=sarif-latest --output=${{TOOL_ANALYSIS_DIR}}/codeql_raw_$language.sarif $database "${{CODEQL_QUERY_PATH}}/$language/ql/src/codeql-suites/$language-code-scanning.qls" "$suppression_query"

        # Parse the baseline results
        python3 -m scrub.tools.parsers.translate_results ${{TOOL_ANALYSIS_DIR}}/codeql_raw_$language.sarif ${{RAW_RESULTS_DIR}}/codeql_raw_$language.scrub ${{SOURCE_DIR}} scrub
    fi

    # Perform P10 analysis, if desired
    if [ ${{CODEQL_P10_ANALYSIS}} == true ] && [ $language == "cpp" ]; then
      ${{CODEQL_PATH}}/codeql database analyze --format=sarif-latest --output=${{TOOL_ANALYSIS_DIR}}/codeql_p10_raw.sarif $database "${{CODEQL_QUERY_PATH}}/cpp/ql/src/Power of 10" "$suppression_query"

      # Parse the SARIF P10 results output file into SCRUB format
      python3 -m scrub.tools.parsers.translate_results ${{TOOL_ANALYSIS_DIR}}/codeql_p10_raw.sarif ${{RAW_RESULTS_DIR}}/codeql_p10_raw.scrub ${{SOURCE_DIR}} scrub
    fi

    # Perform AUTOSAR analysis, if desired
    if [ ${{CODEQL_AUTOSAR_ANALYSIS}} == true ] && [ $language == "cpp" ]; then
      ${{CODEQL_PATH}}/codeql database analyze --format=sarif-latest --output=${{TOOL_ANALYSIS_DIR}}/codeql_autosar_raw.sarif $database "${{CODEQL_CODING_STANDARDS_PATH}}/cpp/autosar/src/codeql-suites/autosar-default.qls" "$suppression_query"

      # Parse the SARIF AUTOSAR results output file into SCRUB format
      python3 -m scrub.tools.parsers.translate_results ${{TOOL_ANALYSIS_DIR}}/codeql_autosar_raw.sarif ${{RAW_RESULTS_DIR}}/codeql_autosar_raw.scrub ${{SOURCE_DIR}} scrub
    fi

    # Perform CERT analysis, if desired
    if [ ${{CODEQL_CERT_ANALYSIS}} == true ] && [ $language == "cpp" ]; then
      ${{CODEQL_PATH}}/codeql database analyze --format=sarif-latest --output=${{TOOL_ANALYSIS_DIR}}/codeql_cert_raw.sarif $database "${{CODEQL_CODING_STANDARDS_PATH}}/cpp/cert/src/codeql-suites/cert-default.qls" "$suppression_query"

      # Parse the SARIF cert results output file into SCRUB format
      python3 -m scrub.tools.parsers.translate_results ${{TOOL_ANALYSIS_DIR}}/codeql_cert_raw.sarif ${{RAW_RESULTS_DIR}}/codeql_cert_raw.scrub ${{SOURCE_DIR}} scrub
    fi

done
